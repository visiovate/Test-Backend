generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  phone         String
  profileImage  String?
  isVerified    Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  street        String?
  city          String?
  state         String?
  zipCode       String?
  latitude      Float?
  longitude     Float?
  bookings      Booking[]
  messages      Message[]
  notifications Notification[]
  reviews       Review[]
  savedMaids    SavedMaid[]

  @@map("users")
}

model Service {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  price       Json          @default("{\"1BHK\": 150.00, \"2BHK\": 250.00, \"3BHK\": 350.00, \"4BHK\": 450.00}")
  bookings    Booking[]      @relation("BookingToService")
  maids       Maid[]         @relation("MaidServices")
  prices      ServicePrice[]

  @@map("services")
}

model ServicePrice {
  id           String   @id @default(uuid())
  serviceId    String
  propertyType String   // e.g., "1BHK", "2BHK", "3BHK", "4BHK"
  price        Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  service      Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, propertyType])
  @@map("service_prices")
}

model Maid {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  phone         String
  profileImage  String?
  bio           String?
  experience    Int            @default(0)
  hourlyRate    Float
  languages     String[]
  serviceAreas  String[]
  isActive      Boolean        @default(true)
  isVerified    Boolean        @default(false)
  ratingAvg     Float          @default(0)
  ratingCount   Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  availability  Json?
  bookings      Booking[]
  notifications Notification[]
  reviews       Review[]
  savedByUsers  SavedMaid[]
  services      Service[]      @relation("MaidServices")

  @@map("maids")
}

model Booking {
  id            String    @id @default(uuid())
  userId        String
  maidId        String
  duration      Int
  scheduledDate DateTime
  scheduledTime String
  city          String
  state         String
  zipCode       String
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  address       String
  status        String    @default("PENDING")
  maid          Maid      @relation(fields: [maidId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
  messages      Message[]
  payment       Payment?
  review        Review?
  services      Service[] @relation("BookingToService")

  @@map("bookings")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  maidId    String
  bookingId String   @unique
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  maid      Maid     @relation(fields: [maidId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model SavedMaid {
  id        String   @id @default(uuid())
  userId    String
  maidId    String
  createdAt DateTime @default(now())
  maid      Maid     @relation(fields: [maidId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, maidId])
  @@map("saved_maids")
}

model Notification {
  id            String           @id @default(uuid())
  recipientId   String
  recipientType RecipientType
  type          NotificationType
  title         String
  message       String
  data          Json?
  isRead        Boolean          @default(false)
  createdAt     DateTime         @default(now())
  maid          Maid?            @relation(fields: [recipientId], references: [id], map: "notifications_maid_fkey")
  user          User?            @relation(fields: [recipientId], references: [id], map: "notifications_user_fkey")

  @@map("notifications")
}

model Payment {
  id              String        @id @default(uuid())
  bookingId       String        @unique
  stripePaymentId String        @unique
  amount          Float
  currency        String        @default("usd")
  status          PaymentStatus
  refunded        Boolean       @default(false)
  refundAmount    Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  booking         Booking       @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Message {
  id        String   @id @default(uuid())
  bookingId String
  senderId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking  @relation(fields: [bookingId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])

  @@map("messages")
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RecipientType {
  USER
  MAID
}

enum NotificationType {
  BOOKING_REQUEST
  BOOKING_ACCEPTED
  BOOKING_REJECTED
  BOOKING_CANCELLED
  BOOKING_COMPLETED
  BOOKING_REMINDER
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}
